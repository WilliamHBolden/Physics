#texture tex //path to texture
textures/t2.png
#end

#model msphere
models/cube.model
#end


#body b1
msphere 	//model
tex 		//texture
10000 			//mass (kg)
1 			//scale
0	0	0 	//center of mass

//inertia tensor (only constants, cmr^2 calculated later)
0.4	0	0
0	0.4	0
0	0	0.4

3000 //number to make

-2150	-2050 //min x	max x
-2150	-2050 //min y	max y
-2150	-2050 //min z	max z

//Rotation [min, max]
0 0
0 0
0 0

//Velocities [min, max]
//0.00105 0.00105 //for moon
0.025 0.025
0.025 0.025
0.025 0.025
//0 0
//0 0
//0 0

//Angular Velocities [min, max]
0 0
0 0
0 0
#end

#body b2
msphere 	//model
tex 		//texture
10000 			//mass (kg)
1 			//scale
0	0	0 	//center of mass

//inertia tensor (only constants, cmr^2 calculated later)
0.4	0	0
0	0.4	0
0	0	0.4

2000 //number to make

2050	2150 //min x	max x
2050	2150 //min y	max y
2050	2150 //min z	max z

//Rotation [min, max]
0 0
0 0
0 0

//Velocities [min, max]
//0.00105 0.00105 //for moon
-0.025 -0.025
-0.025 -0.025
-0.025 -0.025
//0 0
//0 0
//0 0

//Angular Velocities [min, max]
0 0
0 0
0 0
#end

// #body b2
// msphere 	//model
// tex 		//texture
// 10000 			//mass (kg)
// 1 			//scale
// 0	0	0 	//center of mass

// //inertia tensor (only constants, cmr^2 calculated later)
// 0.4	0	0
// 0	0.4	0
// 0	0	0.4

// 4000 //number to make

// //150	250 //min x	max x
// //150	250 //min y	max y
// //150	250 //min z	max z

// -50	50 //min x	max x
// -50	50 //min y	max y
// -50	50 //min z max z

// //Rotation [min, max]
// 0 0
// 0 0
// 0 0

// //Velocities [min, max]
// 0 0
// 0 0
// 0 0

// //Angular Velocities [min, max]
// 0 0
// 0 0
// 0 0
// #end


			// glm::vec3 avel(mx, my, 0.0f);
			

			// float angle = glm::length(avel);

			// if(angle > 0)
			// {
			// 	float sinal = sinf(angle/2.0f)/angle;
			// 	glm::quat inter(cosf(angle/2.0f) ,glm::vec3(avel.x*sinal, avel.y*sinal, avel.z*sinal));
			// 	rotq = inter * rotq;
			// }


			// glm::mat4 mtest = glm::mat4_cast(rotq);
			// mtest = glm::translate(mtest, pos);